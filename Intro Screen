int bTimer = 0, bEndTime = 0;  //creating timer variables to track when to make a new building
int maxBuildings = 10, curBuilding = 0;  //defining what the mas number of buildings there can be and which is the next to be made
int[] bX, bY, bWidth, bHeight;  //making arrays to hold the x, y, width, and height of each building

int cTimer = 0, cEndTime = 0;  //creating timer variables to track when to make a new cloud
int maxClouds = 10, curCloud = 0;  //defining what the mas number of cloud there can be and which is the next to be made
int[] cX, cY, cWidth, cHeight;  //making arrays to hold the x, y, width, and height of each cloud

int dY;  //creating a variable to hold the y position of the dragon
float dTimer = 0;  //creates a variable to time what part of the dragon's arc the dragon is at

//Current version (in format x.y.z where X = revisions of final version, Y = revisions of current iteration, Z = bug fixes, patches, balance changes to current itteration)
String version = " v0.1.0";

byte gameState = 0;

//creating image variables to hold the images for the dragon, building, and cloud
PImage imgDragon;
PImage imgBuilding;
PImage imgCloud;
PImage imgStartButton;
PImage imgTitle;

ArrayList menuButtons;

int fCredits = 0;
int fCredits2 = 0;
int gCount =0;
void setup(){
  size(600, 600);
  
  frameRate(60);
  
  dY = height / 4;  //setting the dragon height at a fourth of the screen
  
  //initilizing the building location/size and image variables
  bX = new int[maxBuildings];
  bY = new int[maxBuildings];
  bWidth = new int[maxBuildings];
  bHeight = new int[maxBuildings];
  imgBuilding = loadImage("Building.png");
  
  //initilizing the cloud location/size and image variables
  cX = new int[maxClouds];
  cY = new int[maxClouds];
  cWidth = new int[maxClouds];
  cHeight = new int[maxClouds];
  
  imgCloud = loadImage("Cloud.png");
  
  imgDragon = loadImage("Dragon.png");  //loading the image for the dragon
  
  imgTitle = loadImage("Title.png");
  
  menuButtons = new ArrayList(4);
  
  menuButtons.add(new menuButton((width/5), (height/10)*3 +40, (width/5 *3), 70, 1, 'a'));
  menuButtons.add(new menuButton((width/5), (height/10)*5 +20, (width/5 *3), 70, 2, 'a'));
  menuButtons.add(new menuButton((width/5), (height/10)*7, (width/5 *3), 70, 3, 'a'));
  menuButtons.add(new menuButton((width/5), (height/10)*9 - 20, (width/5 *3), 70, 4, 'a'));
  
  
}




void draw(){
  clear();
  
  if (gameState == 0) {  //making the background colour sky blue
    gCount = 0;
    background(0,100,220);
    //draw the ground at the bottom of the screen
    drawBACKGROUND();
    
    drawSTART();
  }
  
  else if (gameState == 1) {
    gCount++;
    textSize(200);
    text("VIDEO",0,150);
    text("GAME",0,350);  
    if (gCount == 180)
      gameState = 0;
  }
  
  else if (gameState == 2) {
    gCount = 0;
    background(0,100,220);
    drawBACKGROUND();
    drawCREDITS();
    
  }
}

void drawBACKGROUND(){
     fill(0,200,0);
    rect(-5,height - height/100,width+5,height);
    
    spawnRandom();  //spawning any new clouds or buildings
    
    //drawing all the buildings
    fill(150);
    for (int i = 0; i < maxBuildings; i++){
      bX[i]--;  //moving the buildings to the left
      //image(imgBuilding, bX[i], bY[i], bWidth[i], bHeight[i]);  //use if using images
      rect(bX[i], bY[i], bWidth[i], bHeight[i]);  //use if using rectangles
    }
    
    //drawing all the clouds
    fill(255,255,255,200);
    noStroke();
    for (int i = 0; i < maxClouds; i++){
      cX[i]--;  //moving the clouds left
      //image(imgCloud, cX[i] - cWidth[i] / 2, cY[i], cWidth[i], cHeight[i]);  //use if using images
      ellipse(cX[i], cY[i], cWidth[i], cHeight[i]);  //use if using circles
    }
    stroke(0);
    
    //updating where in the arc the dragon is and drawing it
    dTimer += 0.05;
    fill(255,0,0);
    //image(imgDragon, width/2 - width / 15,dY - abs(sin(dTimer) * 20),width / 15,width / 15);  //use if using images
    ellipse(width/2,dY - abs(sin(dTimer) * 20),width / 30,width / 30);  //use if using curcles
    
  
  
}
void drawSTART() {

  textSize(20);
  fill(255);
  image(imgTitle, width/6 + 5, height/10); //use if using images  
  text(version, width/6 + 10, height/10 *2 + 12);
 // text("Dragon Lore" + version, 50, 50);
  
  
  textSize(30); 

  for (int i = 0; i < menuButtons.size(); i++) {
   menuButton b = (menuButton)menuButtons.get(i);   
   if(b.clicked == true) {
    b.clicked();
  }
  //Calls the display button function.
   b.display(b.type);
  }

  
  
}

void drawCREDITS() {
  fill(0);
  if (fCredits < (height -35))
  fCredits++;
  textSize(30);
  text("Design and Programing by:",5,(height - fCredits));
  text("Ante Cavar",5, ((height + 35) -fCredits));
  text("Jacob Martin",5, ((height + 70) -fCredits));
  text("Julian Greppin",5, ((height + 105) -fCredits));
  
  text("Additional Assets, References",5,(height + 175 - fCredits));
  text("and Special Considerations:", 5, (height + 210) - fCredits);
  textSize(20);
  text("Cup and Talon font by S. John Ross",5,(height + 235 - fCredits));
  
  if (fCredits == (height - 35))
    fCredits2++;
  if (fCredits2 == 60)
    gameState = 0;
  
  
  
}


void spawnRandom() {
  bTimer++;  //adding 1 to the building spawn timer
  if (bTimer >= bEndTime){  //checking if it's time to make a new building
    bTimer = 0;  //reseting the building spawn timer
    bEndTime = (int)random(60, 180);  //changing how long between spawning buildings
    
    //randomizing the buildings dimensions if using rectangles
    //int newHeight = (int)random(width / 12, width / 3);
    //int newWidth = (int)random(height / 12, height / 6);
    //setting the width and height of the building if using an image
    int newHeight = 85;
    int newWidth = 100;
    
    //setting the coordinates and dimensions of the new building
    bX[curBuilding] = width;
    bY[curBuilding] = height - newHeight;// - height/100;
    bWidth[curBuilding] = newWidth;
    bHeight[curBuilding] = newHeight;
    
    //moving the curBuilding vaiable to the next building and reseting it if nessesary
    curBuilding++;
    if (curBuilding >= maxBuildings)
      curBuilding = 0;
  }
  
  cTimer++;  //adding 1 to the cloud spawn timer
  if (cTimer >= cEndTime){  //checking if it's time to make a new cloud
    cTimer = 0;  //reseting the cloud spawn timer
    cEndTime = (int)random(60, 180);  //changing how long between building buildings
    
    //randomizing the cloud's dimensions
    int newHeight = (int)random(height / 12, height / 6);
    int newWidth = (int)random(width / 12, width / 3);
    int newY = (int)random(height / 3, height / 2);
    
    //setting the coordinates and dimensions of the new cloud
    cX[curCloud] = width + newWidth / 2;
    cY[curCloud] = newY;
    cWidth[curCloud] = newWidth;
    cHeight[curCloud] = newHeight;
    
    //moving the curCloud vaiable to the next building and reseting it if nessesary
    curCloud++;
    if (curCloud >= maxClouds)
      curCloud = 0;
  }
  
}


void mouseClicked() {
   if (gameState == 0) {
     for (int i = 0; i < menuButtons.size(); i++) {
       menuButton b = (menuButton)menuButtons.get(i);
       
       if (mouseX > b.x && mouseX < (b.x + b.l) && mouseY > b.y && mouseY < (b.y + b.w)) {
         b.clicked = true;
         
       }

    }  
   }  
   
   //else if(gameState == 3) {
   //  //Checks if the player clicks a button.
   //  for (int i = 0; i < buttons.size(); i++) {
   //    Button b = (Button)buttons.get(i);
   //    float x = (mouseX - (b.x+(b.l/2))) * (mouseX - (b.x+(b.l/2)));
   //    float y = (mouseY - (b.y+(b.w/2))) * (mouseY - (b.y+(b.w/2)));
   //    int z =  round(sqrt(x+y));
       
   //    if (z < 25) 
   //      b.clicked = true;
   // }
 //} 
}

class menuButton {
  int x, y;
  int l, w;
  int type;
  char identity;
  boolean clicked;
  menuButton (int p1, int p2, int p3, int p4, int p5, char p6) {
    x = p1;
    y = p2;
    l = p3;
    w = p4;
    type = p5;
    identity = p6;
  }
  //If a button is found clicked, this function determines what to do.
  void clicked() {

    if (this.type == 1) {
      gameState = 1;

    }
    else if(this.type == 2){
      gameState = 1;
      
    }
    else if(this.type == 3){
      gameState = 2;
    }
    else if(this.type == 4)
      exit();
    this.clicked = false;
  }
  
  //Displays the buttons graphically for the player.
  void display(int type) {
    if (type == 1) {
      fill(255);
      rect(x,y,l,w,7);
      fill(0);
      rect(x+5, y+5, l-10, w-10, 7);
      fill(255);
      textSize(30);
      text("Start", x + 15, y + (w - 15));
    }
    else if (type == 2) {
      fill(255);
      rect(x,y,l,w,7);
      fill(0);
      rect(x+5, y+5, l-10, w-10, 7);
      fill(255);
      textSize(30);
      text("Start (placeholder)", x + 15, y + (w - 15));
    }
        else if (type == 3) {
      fill(255);
      rect(x,y,l,w,7);
      fill(0);
      rect(x+5, y+5, l-10, w-10, 7);
      fill(255);
      textSize(30);
      text("Credits", x + 15, y + (w - 15));
    }
        else if (type == 4) {
      fill(255);
      rect(x,y,l,w,7);
      fill(0);
      rect(x+5, y+5, l-10, w-10, 7);
      fill(255);
      textSize(30);
      text("Quit", x + 15, y + (w - 15));
    }
    else if (type > 4) {
      fill(0,0,255);
      rect(x,y,l,w,7); 
      if (this.clicked == true)
        fill(255);
      else
        fill(0);
      rect(x+5, y+5, l-10, w-10, 7); 
      if (this.clicked == true)
        fill(0);
      else
        fill(255);
      textSize(18);
      text("(temp)", x + 8, y + (w/2 + w/10) );
    }
  }
}

