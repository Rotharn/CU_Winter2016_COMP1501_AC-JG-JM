int bTimer = 0, bEndTime = 0;  //creating timer variables to track when to make a new building
int maxBuildings = 10, curBuilding = 0;  //defining what the mas number of buildings there can be and which is the next to be made
int[] bX, bY, bWidth, bHeight;  //making arrays to hold the x, y, width, and height of each building

int cTimer = 0, cEndTime = 0;  //creating timer variables to track when to make a new cloud
int maxClouds = 10, curCloud = 0;  //defining what the mas number of cloud there can be and which is the next to be made
int[] cX, cY, cWidth, cHeight;  //making arrays to hold the x, y, width, and height of each cloud

int dY;  //creating a variable to hold the y position of the dragon
float dTimer = 0;  //creates a variable to time what part of the dragon's arc the dragon is at

//creating image variables to hold the images for the dragon, building, and cloud
PImage imgDragon;
PImage imgBuilding;
PImage imgCloud;

void setup(){
  size(600, 600);
  
  frameRate(60);
  
  dY = height / 4;  //setting the dragon height at a fourth of the screen
  
  //initilizing the building location/size and image variables
  bX = new int[maxBuildings];
  bY = new int[maxBuildings];
  bWidth = new int[maxBuildings];
  bHeight = new int[maxBuildings];
  imgBuilding = loadImage("Building.png");
  
  //initilizing the cloud location/size and image variables
  cX = new int[maxClouds];
  cY = new int[maxClouds];
  cWidth = new int[maxClouds];
  cHeight = new int[maxClouds];
  imgCloud = loadImage("Cloud.png");
  
  imgDragon = loadImage("Dragon.png");  //loading the image for the dragon
}

void draw(){
  clear();
  
  background(0,100,220);  //making the background colour sky blue
  
  //draw the ground at the bottom of the screen
  fill(0,200,0);
  rect(-5,height - height/100,width+5,height);
  
  spawnRandom();  //spawning any new clouds or buildings
  
  //drawing all the buildings
  fill(150);
  for (int i = 0; i < maxBuildings; i++){
    bX[i]--;  //moving the buildings to the left
    //image(imgBuilding, bX[i], bY[i], bWidth[i], bHeight[i]);  //use if using images
    rect(bX[i], bY[i], bWidth[i], bHeight[i]);  //use if using rectangles
  }
  
  //drawing all the clouds
  fill(255,255,255,200);
  noStroke();
  for (int i = 0; i < maxClouds; i++){
    cX[i]--;  //moving the clouds left
    //image(imgCloud, cX[i] - cWidth[i] / 2, cY[i], cWidth[i], cHeight[i]);  //use if using images
    ellipse(cX[i], cY[i], cWidth[i], cHeight[i]);  //use if using circles
  }
  stroke(0);
  
  //updating where in the arc the dragon is and drawing it
  dTimer += 0.05;
  fill(255,0,0);
  //image(imgDragon, width/2 - width / 15,dY - abs(sin(dTimer) * 20),width / 15,width / 15);  //use if using images
  ellipse(width/2,dY - abs(sin(dTimer) * 20),width / 30,width / 30);  //use if using curcles
  
}

void spawnRandom() {
  bTimer++;  //adding 1 to the building spawn timer
  if (bTimer >= bEndTime){  //checking if it's time to make a new building
    bTimer = 0;  //reseting the building spawn timer
    bEndTime = (int)random(60, 180);  //changing how long between spawning buildings
    
    //randomizing the buildings dimensions if using rectangles
    //int newHeight = (int)random(width / 12, width / 3);
    //int newWidth = (int)random(height / 12, height / 6);
    //setting the width and height of the building if using an image
    int newHeight = 85;
    int newWidth = 100;
    
    //setting the coordinates and dimensions of the new building
    bX[curBuilding] = width;
    bY[curBuilding] = height - newHeight;// - height/100;
    bWidth[curBuilding] = newWidth;
    bHeight[curBuilding] = newHeight;
    
    //moving the curBuilding vaiable to the next building and reseting it if nessesary
    curBuilding++;
    if (curBuilding >= maxBuildings)
      curBuilding = 0;
  }
  
  cTimer++;  //adding 1 to the cloud spawn timer
  if (cTimer >= cEndTime){  //checking if it's time to make a new cloud
    cTimer = 0;  //reseting the cloud spawn timer
    cEndTime = (int)random(60, 180);  //changing how long between building buildings
    
    //randomizing the cloud's dimensions
    int newHeight = (int)random(height / 12, height / 6);
    int newWidth = (int)random(width / 12, width / 3);
    int newY = (int)random(height / 3, height / 2);
    
    //setting the coordinates and dimensions of the new cloud
    cX[curCloud] = width + newWidth / 2;
    cY[curCloud] = newY;
    cWidth[curCloud] = newWidth;
    cHeight[curCloud] = newHeight;
    
    //moving the curCloud vaiable to the next building and reseting it if nessesary
    curCloud++;
    if (curCloud >= maxClouds)
      curCloud = 0;
  }
  
}
